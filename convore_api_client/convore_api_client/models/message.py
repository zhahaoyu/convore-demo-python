# coding: utf-8

"""
    Convore API

    Convore API v1.0.0

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from convore_api_client.models.attachment import Attachment
from convore_api_client.models.message_direction import MessageDirection
from convore_api_client.models.message_format import MessageFormat
from convore_api_client.models.message_participant import MessageParticipant
from convore_api_client.models.message_reply_type import MessageReplyType
from typing import Optional, Set
from typing_extensions import Self

class Message(BaseModel):
    """
    Message
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier of the message.")
    channel_id: StrictStr = Field(description="Identifier of the channel through which the conversation is taking place.")
    conversation_id: StrictStr = Field(description="Identifier of the conversation the message belongs to.")
    reply_to_message_id: Optional[StrictStr] = Field(default=None, description="The ID of the message that you're replying to. For Gmail and Microsoft Graph, this is the provider ID of the message that you're replying to. For IMAP Send, this is the RFC822 Message-ID header of the message that you're replying to.")
    reply_type: Optional[MessageReplyType] = None
    subject: Optional[StrictStr] = Field(default=None, description="Subject of the email message, if applicable. Null for non-email conversations.")
    direction: MessageDirection
    var_date: datetime = Field(description="ISO 8601 time of when the message was sent.", alias="date")
    sender: MessageParticipant
    recipients: List[MessageParticipant] = Field(description="The name/handle pairs of the recipients, including to, cc, and bcc.")
    snippet: Optional[StrictStr] = Field(default=None, description="A short preview of the message body, generated by the channel provider")
    body: Optional[StrictStr] = Field(default=None, description="The full HTML body of the message without quotations.")
    text_body: Optional[StrictStr] = Field(default=None, description="The text content of body")
    raw_body: Optional[StrictStr] = Field(default=None, description="The raw HTML body of the message. Messages with only plain-text representations are up-converted to HTML.")
    attachments: Optional[List[Attachment]] = Field(default=None, description="An array of Attachment objects.")
    external_message_id: Optional[StrictStr] = Field(default=None, description="The identifier of the message in an external system.")
    created_at: datetime = Field(description="The ISO 8601 time at which the Message was created.")
    format: MessageFormat
    __properties: ClassVar[List[str]] = ["id", "channel_id", "conversation_id", "reply_to_message_id", "reply_type", "subject", "direction", "date", "sender", "recipients", "snippet", "body", "text_body", "raw_body", "attachments", "external_message_id", "created_at", "format"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Message from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sender
        if self.sender:
            _dict['sender'] = self.sender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item in self.recipients:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item in self.attachments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attachments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Message from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "channel_id": obj.get("channel_id"),
            "conversation_id": obj.get("conversation_id"),
            "reply_to_message_id": obj.get("reply_to_message_id"),
            "reply_type": obj.get("reply_type"),
            "subject": obj.get("subject"),
            "direction": obj.get("direction"),
            "date": obj.get("date"),
            "sender": MessageParticipant.from_dict(obj["sender"]) if obj.get("sender") is not None else None,
            "recipients": [MessageParticipant.from_dict(_item) for _item in obj["recipients"]] if obj.get("recipients") is not None else None,
            "snippet": obj.get("snippet"),
            "body": obj.get("body"),
            "text_body": obj.get("text_body"),
            "raw_body": obj.get("raw_body"),
            "attachments": [Attachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "external_message_id": obj.get("external_message_id"),
            "created_at": obj.get("created_at"),
            "format": obj.get("format")
        })
        return _obj


