# coding: utf-8

"""
    Convore API

    Convore API v1.0.0

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Attachment(BaseModel):
    """
    An array of Attachment objects.
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier of the attachment.")
    conversation_id: StrictStr = Field(description="Conversation ID of the conversation the attachment belongs to..")
    draft_id: Optional[StrictStr] = Field(default=None, description="Draft ID of the draft the attachment belongs to. Either this or message_id must be provided, but not both.")
    message_id: Optional[StrictStr] = Field(default=None, description="Message ID of the message the attachment belongs to. Either this or draft_id must be provided, but not both.")
    content_type: StrictStr = Field(description="MIME type of the attachment (e.g., image/png, application/pdf).")
    filename: StrictStr = Field(description="Original filename of the attachment.")
    is_inline: StrictBool = Field(description="Only applies to Email messages. Indicates if the attachment is displayed inline (using CID) within the message content or as a regular attachment.")
    content_id: Optional[StrictStr] = Field(default=None, description="Applicable to Email messages with inline attachments. Corresponds to the Content-ID (CID) of an inline image or other attachment displayed within the message content. For instance, an inline image might be referenced in the HTML message body as <img src=\"cid:image01.png\">. In this example, the 'contentId' would be 'image01.png'.")
    size: StrictInt = Field(description="Size of the attachment in bytes.")
    __properties: ClassVar[List[str]] = ["id", "conversation_id", "draft_id", "message_id", "content_type", "filename", "is_inline", "content_id", "size"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "conversation_id": obj.get("conversation_id"),
            "draft_id": obj.get("draft_id"),
            "message_id": obj.get("message_id"),
            "content_type": obj.get("content_type"),
            "filename": obj.get("filename"),
            "is_inline": obj.get("is_inline"),
            "content_id": obj.get("content_id"),
            "size": obj.get("size")
        })
        return _obj


