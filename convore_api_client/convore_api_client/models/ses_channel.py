# coding: utf-8

"""
    Convore API

    Convore API v1.0.0

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from convore_api_client.models.inbound_webhook import InboundWebhook
from typing import Optional, Set
from typing_extensions import Self

class SesChannel(BaseModel):
    """
    The specific ses channel information
    """ # noqa: E501
    sns_topic_arn: Optional[StrictStr] = Field(default=None, description="The SNS topic for SES to publish incoming message events to")
    subscription_arn: Optional[StrictStr] = Field(default=None, description="The SNS subscription ARN that Convore uses to listen to the SNS topic")
    inbound_webhook: Optional[InboundWebhook] = None
    __properties: ClassVar[List[str]] = ["sns_topic_arn", "subscription_arn", "inbound_webhook"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SesChannel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inbound_webhook
        if self.inbound_webhook:
            _dict['inbound_webhook'] = self.inbound_webhook.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SesChannel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sns_topic_arn": obj.get("sns_topic_arn"),
            "subscription_arn": obj.get("subscription_arn"),
            "inbound_webhook": InboundWebhook.from_dict(obj["inbound_webhook"]) if obj.get("inbound_webhook") is not None else None
        })
        return _obj


