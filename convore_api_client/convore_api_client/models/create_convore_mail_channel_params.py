# coding: utf-8

"""
    Convore API

    Convore API v1.0.0

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateConvoreMailChannelParams(BaseModel):
    """
    Configuration used to create a channel for convore mail.
    """ # noqa: E501
    sender_name: StrictStr = Field(description="The default name of the sender. Can be overriden on a per-message basis.")
    address: Annotated[str, Field(strict=True)] = Field(description="It should consist only of lowercase alphanumeric characters (a-z, 0-9), include at least 5 digits, and end with '@convoremail.com' or '@convoreapplication.com'. Additionally, aliases are supported by appending '+alias' to the local part of the email address. For instance, 'foobar@convoremail.com' can have an alias like 'foobar+1@convoremail.com'. Emails sent to an alias are routed to the primary mailbox.")
    __properties: ClassVar[List[str]] = ["sender_name", "address"]

    @field_validator('address')
    def address_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9]{5,}@((test\.)?(convoreapplication\.com|convoremail\.com))$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9]{5,}@((test\.)?(convoreapplication\.com|convoremail\.com))$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateConvoreMailChannelParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateConvoreMailChannelParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sender_name": obj.get("sender_name"),
            "address": obj.get("address")
        })
        return _obj


