# coding: utf-8

"""
    Convore API

    Convore API v1.0.0

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from convore_api_client.models.conversation_priority import ConversationPriority
from convore_api_client.models.conversation_status import ConversationStatus
from convore_api_client.models.label import Label
from convore_api_client.models.message_participant import MessageParticipant
from typing import Optional, Set
from typing_extensions import Self

class Conversation(BaseModel):
    """
    Conversation
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier of the conversation.")
    channel_id: StrictStr = Field(description="Identifier of the channel through which the conversation is taking place.")
    status: ConversationStatus
    priority: ConversationPriority
    labels: List[Label] = Field(description="List of labels for this conversation")
    participants: List[MessageParticipant]
    subject: Optional[StrictStr] = Field(default=None, description="Subject of the conversation, if applicable. Null for non-email conversations.")
    snippet: Optional[StrictStr] = Field(default=None, description="A shortened plain-text preview of the message body.")
    is_unread: Optional[StrictBool] = Field(default=None, description="Whether the conversation has been read.")
    last_message_date: Optional[datetime] = Field(default=None, description="ISO 8601 time of the most recent message.")
    external_conversation_id: Optional[StrictStr] = Field(default=None, description="The identifier of the conversation in an external system.")
    message_count: Optional[StrictInt] = Field(default=None, description="The number of messages in this conversation.")
    draft_count: Optional[StrictInt] = Field(default=None, description="The number of drafts in this conversation.")
    attachment_count: Optional[StrictInt] = Field(default=None, description="The number of attachments in this conversation.")
    created_at: datetime = Field(description="The ISO 8601 time at which the Conversation was created.")
    __properties: ClassVar[List[str]] = ["id", "channel_id", "status", "priority", "labels", "participants", "subject", "snippet", "is_unread", "last_message_date", "external_conversation_id", "message_count", "draft_count", "attachment_count", "created_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Conversation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item in self.labels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in participants (list)
        _items = []
        if self.participants:
            for _item in self.participants:
                if _item:
                    _items.append(_item.to_dict())
            _dict['participants'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Conversation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "channel_id": obj.get("channel_id"),
            "status": obj.get("status"),
            "priority": obj.get("priority"),
            "labels": [Label.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "participants": [MessageParticipant.from_dict(_item) for _item in obj["participants"]] if obj.get("participants") is not None else None,
            "subject": obj.get("subject"),
            "snippet": obj.get("snippet"),
            "is_unread": obj.get("is_unread"),
            "last_message_date": obj.get("last_message_date"),
            "external_conversation_id": obj.get("external_conversation_id"),
            "message_count": obj.get("message_count"),
            "draft_count": obj.get("draft_count"),
            "attachment_count": obj.get("attachment_count"),
            "created_at": obj.get("created_at")
        })
        return _obj


