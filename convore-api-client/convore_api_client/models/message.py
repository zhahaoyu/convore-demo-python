import datetime
from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field
from dateutil.parser import isoparse

from ..models.message_direction import MessageDirection
from ..models.message_format import MessageFormat
from ..models.message_reply_type import MessageReplyType
from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.attachment import Attachment
    from ..models.message_participant import MessageParticipant


T = TypeVar("T", bound="Message")


@_attrs_define
class Message:
    """
    Attributes:
        id (str): Unique identifier of the message. Example: msg_01hggtpfewf0y91nde7cz02p0k.
        channel_id (str): Identifier of the channel through which the conversation is taking place. Example:
            chnnl_01h2xcejqtf2nbrexx3vqjhp41.
        conversation_id (str): Identifier of the conversation the message belongs to. Example:
            chnnl_01h2xcejqtf2nbrexx3vqjhp41.
        direction (MessageDirection): Whether the message is inbound or outbound.
        date (datetime.datetime): ISO 8601 time of when the message was sent.
        sender (MessageParticipant): The name/handle pairs of the recipients, including to, cc, and bcc.
        recipients (List['MessageParticipant']): The name/handle pairs of the recipients, including to, cc, and bcc.
        created_at (datetime.datetime): The ISO 8601 time at which the Message was created.
        format_ (MessageFormat):
        reply_to_message_id (Union[Unset, str]): The ID of the message that you're replying to. For Gmail and Microsoft
            Graph, this is the provider ID of the message that you're replying to. For IMAP Send, this is the RFC822
            Message-ID header of the message that you're replying to. Example: msg_01h2xcejqtf2nbrexx3vqjhp41.
        reply_type (Union[Unset, MessageReplyType]): The type of reply that you're sending. If not provided, the channel
            will determine the reply type.
        subject (Union[Unset, str]): Subject of the email message, if applicable. Null for non-email conversations.
            Example: Issue with Verification Process.
        snippet (Union[Unset, str]): A short preview of the message body, generated by the channel provider Example:
            ....
        body (Union[Unset, str]): The full HTML body of the message without quotations. Example: ....
        text_body (Union[Unset, str]): The text content of body Example: ....
        raw_body (Union[Unset, str]): The raw HTML body of the message. Messages with only plain-text representations
            are up-converted to HTML. Example: ....
        attachments (Union[Unset, List['Attachment']]): An array of Attachment objects.
        external_message_id (Union[Unset, str]): The identifier of the message in an external system.
    """

    id: str
    channel_id: str
    conversation_id: str
    direction: MessageDirection
    date: datetime.datetime
    sender: "MessageParticipant"
    recipients: List["MessageParticipant"]
    created_at: datetime.datetime
    format_: MessageFormat
    reply_to_message_id: Union[Unset, str] = UNSET
    reply_type: Union[Unset, MessageReplyType] = UNSET
    subject: Union[Unset, str] = UNSET
    snippet: Union[Unset, str] = UNSET
    body: Union[Unset, str] = UNSET
    text_body: Union[Unset, str] = UNSET
    raw_body: Union[Unset, str] = UNSET
    attachments: Union[Unset, List["Attachment"]] = UNSET
    external_message_id: Union[Unset, str] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        id = self.id

        channel_id = self.channel_id

        conversation_id = self.conversation_id

        direction = self.direction.value

        date = self.date.isoformat()

        sender = self.sender.to_dict()

        recipients = []
        for recipients_item_data in self.recipients:
            recipients_item = recipients_item_data.to_dict()
            recipients.append(recipients_item)

        created_at = self.created_at.isoformat()

        format_ = self.format_.value

        reply_to_message_id = self.reply_to_message_id

        reply_type: Union[Unset, str] = UNSET
        if not isinstance(self.reply_type, Unset):
            reply_type = self.reply_type.value

        subject = self.subject

        snippet = self.snippet

        body = self.body

        text_body = self.text_body

        raw_body = self.raw_body

        attachments: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.attachments, Unset):
            attachments = []
            for attachments_item_data in self.attachments:
                attachments_item = attachments_item_data.to_dict()
                attachments.append(attachments_item)

        external_message_id = self.external_message_id

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "id": id,
                "channel_id": channel_id,
                "conversation_id": conversation_id,
                "direction": direction,
                "date": date,
                "sender": sender,
                "recipients": recipients,
                "created_at": created_at,
                "format": format_,
            }
        )
        if reply_to_message_id is not UNSET:
            field_dict["reply_to_message_id"] = reply_to_message_id
        if reply_type is not UNSET:
            field_dict["reply_type"] = reply_type
        if subject is not UNSET:
            field_dict["subject"] = subject
        if snippet is not UNSET:
            field_dict["snippet"] = snippet
        if body is not UNSET:
            field_dict["body"] = body
        if text_body is not UNSET:
            field_dict["text_body"] = text_body
        if raw_body is not UNSET:
            field_dict["raw_body"] = raw_body
        if attachments is not UNSET:
            field_dict["attachments"] = attachments
        if external_message_id is not UNSET:
            field_dict["external_message_id"] = external_message_id

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.attachment import Attachment
        from ..models.message_participant import MessageParticipant

        d = src_dict.copy()
        id = d.pop("id")

        channel_id = d.pop("channel_id")

        conversation_id = d.pop("conversation_id")

        direction = MessageDirection(d.pop("direction"))

        date = isoparse(d.pop("date"))

        sender = MessageParticipant.from_dict(d.pop("sender"))

        recipients = []
        _recipients = d.pop("recipients")
        for recipients_item_data in _recipients:
            recipients_item = MessageParticipant.from_dict(recipients_item_data)

            recipients.append(recipients_item)

        created_at = isoparse(d.pop("created_at"))

        format_ = MessageFormat(d.pop("format"))

        reply_to_message_id = d.pop("reply_to_message_id", UNSET)

        _reply_type = d.pop("reply_type", UNSET)
        reply_type: Union[Unset, MessageReplyType]
        if isinstance(_reply_type, Unset):
            reply_type = UNSET
        else:
            reply_type = MessageReplyType(_reply_type)

        subject = d.pop("subject", UNSET)

        snippet = d.pop("snippet", UNSET)

        body = d.pop("body", UNSET)

        text_body = d.pop("text_body", UNSET)

        raw_body = d.pop("raw_body", UNSET)

        attachments = []
        _attachments = d.pop("attachments", UNSET)
        for attachments_item_data in _attachments or []:
            attachments_item = Attachment.from_dict(attachments_item_data)

            attachments.append(attachments_item)

        external_message_id = d.pop("external_message_id", UNSET)

        message = cls(
            id=id,
            channel_id=channel_id,
            conversation_id=conversation_id,
            direction=direction,
            date=date,
            sender=sender,
            recipients=recipients,
            created_at=created_at,
            format_=format_,
            reply_to_message_id=reply_to_message_id,
            reply_type=reply_type,
            subject=subject,
            snippet=snippet,
            body=body,
            text_body=text_body,
            raw_body=raw_body,
            attachments=attachments,
            external_message_id=external_message_id,
        )

        message.additional_properties = d
        return message

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
